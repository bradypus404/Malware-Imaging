from io import open_code
from posixpath import split
from capstone import *
from PIL import Image
from capstone.x86 import get_arch_info
from skimage.transform import resize
import numpy as np
from binascii import unhexlify
import os
import time

'''
# 디렉토리가 없으면 생성하고 있으면 생성X
def createFolder(directory):
    try:
        if not os.path.exists(directory):
            os.makedirs(directory)
    except OSError:
        print ('Error: Creating directory. ' +  directory)

# 파일을 읽고 16진수 값을 1byte씩 끊어서 저장
def file_read_write(path, path_img):
    path_img = path_img + '.txt'
    f_img = open(path_img, 'w')
    try:
        malware_f = open(path, 'rb')
    except IOError:
        print('None file')
        exit(1)
    output = []
    CODE = ''
    num = 0
    while True:
        buf16 = malware_f.read(16)
        buf16Len = len(buf16)

        if(buf16Len == 0):break

        for i in range(buf16Len):
            num += 1
            CODE += "%02x " % (int(buf16[i]))
        if (num >= 2250000): break

    f_img.write(CODE)
    f_img.close()
    malware_f.close()
    return CODE

# opcode를 인텔 64비트로 추출하고 hex를 저장
def extraction_opcode(byte_CODE):  
    opcode_list = []
    temp = 0

    md = Cs(CS_ARCH_X86, CS_MODE_64)
    for (address, size, mnemonic, op_str) in md.disasm_lite(byte_CODE, 0x00):
        write_hex = ''
        for i in range(temp, temp+size):
            if (i == len(byte_CODE)): return opcode_list
            if (i >= (1500*1500)): return opcode_list
            hex_CODE = hex(byte_CODE[i])
            opcode_list.append(int(hex_CODE, 16))
            write_hex += hex_CODE + ' '

        opcode_list.append(0)
        temp += size
    
    return opcode_list

# opcode를 SO기법으로 이미지화
# SO 기법 : 첫 좌표부터 8bit(1byte)씩 끊어서 그 값을 grayscale로 변환하여 이미지화
def imaging_opcode(opcode_list, path_img):
    # sqrt = math.ceil(math.sqrt(len(opcode_list)))
    sqrt = 1500
    sum = sqrt * sqrt 
    if len(opcode_list) >= sum:
        op_data = opcode_list[:sum]
        print(len(op_data))
    else :
        sum = sum - len(opcode_list)
        op_data = np.pad(opcode_list, (0, sum), mode='constant', constant_values=0)

    outputDuble = np.reshape(op_data,(sqrt, sqrt))

    image = Image.fromarray(np.uint8(outputDuble))
    Image.new(mode='L', size=(256, 256))
    path_img = path_img + '.png'
    image.save(path_img, format='PNG')

def oldtime(start, time):
    print('time :', time - start)
    return time

'''
def readfile(path):
    file_list = os.listdir(path)
    return file_list 
'''


# path = 'C:/Users/brady/VScode/malware/Class/'     # Malware
path = 'C:/Users/brady/VScode/Normal/Class/'       # Normal
file_list = os.listdir(path)
# path_img = 'C:/Users/brady/VScode/malware/Image/' # Malware
path_img = 'C:/Users/brady/VScode/Normal/Image/'   # Normal
start = time.time()
last_time = start

for signature in file_list:
    path_s = path + signature + '/'
    path_img_s = path_img + signature + '/'
    filetype_list = os.listdir(path_s)

    for filetype in filetype_list:
        path_t = path_s + filetype + '/'
        path_img_t = path_img_s + filetype + '/'
        malware_list = os.listdir(path_t)
        
        createFolder(path_img_t)

        for malware in malware_list:
            path_m = path_t + malware
            file_type = malware.split('.')

            path_img_m = path_img_t + file_type[0]
            path_exist = path_img_m + '.png'
            print(path_exist)

            if file_type[1] == 'txt': continue
            
            CODE = file_read_write(path_m, path_img_m)
            print('funtion(file_read_write) :', end='')
            last_time = oldtime(last_time, time.time())

            if os.path.isfile(path_exist):
                print('yes')
                continue

            byte_CODE = bytes.fromhex(CODE)
            print('funtion(fromhex) :', end='')
            last_time = oldtime(last_time, time.time())

            opcode_list = extraction_opcode(byte_CODE)
            print('funtion(extraction_opcode) :', end='')
            last_time = oldtime(last_time, time.time())

            imaging_opcode(opcode_list, path_img_m)
            print('funtion(imaging_opcode) :', end='')
            last_time = oldtime(last_time, time.time())

            print('total time :', end='')
            last_time = oldtime(start, time.time())

# createFolder('./sss/aaa')

#test
'''
X86_CODE64_bytes = b"\x4D\x5A\x90\x03\x00\x04\x00\x00\x0F\x80\x00\xE1\xFB\xAE\x0B\x49\xCD\x21\xB8\x14\xCC\xD2\x15\x46\x86\x97\x32\x07\x07\x26\xF6\x77\x26\x16\xD2\x06\x36\x16\xE6\xE6\xF7\x42\x06\x26\x52\x07\x27\x56\xE2\x06\x96\xE2\x04\x44\xF5\x32\x06\xD6\xF6\x46\x52\xED\xDA\x24\x00\x00\x00\x01\x4D\x95\x49\x85\x0B\x83\xAC\xB5\x0B\x83\xAC\xB5\x0B\x83\xAC\xB5\x9C\x0A\x9C\xB7\xEB\x83\xAC\xB4\x4D\x33\xEC\xA5\xAB\x83\xAC\xB4\x4D\x33\x9C\xA5\x3B\x83\xAC\xB4\x4D\x33\xBC\xA5\x9B\x83\xAC\xB5\x0B\x83\xBC\xB7\xEB\xD3\xAC\xB4\x4D\x33\x2C\xA4\xEB\x83\xAC\xB4\x4D\x33\xFC\xA7\x1B\x83\xAC\xB4\x4D\x3C\x7C\xB5\x1B\x83\xAC\xB4\x4D\x3C\x5C\xB5\x1B\x83\xAC\xB4\x4D\x33\x8C\xA5\x1B\x83\xAC\xB5\x26\x96\x36\x85\x0B\x83\xAC\xB0\x00\x00\x00\x00\x00\x00\x00\x05\x04\x50\x06\x48\x67\x0D\x48\x07\xEF\x50\x00\x00\x00\x0F\x00\x22\x0B\x2E\x14\x06\x82\x00\xEC\x00\x00\x00\x30\x5A\x20\x01\x00\x00\x00\x40\x10\x00\x01\x00\x00\x20\x0A\x00\x0A\x00\x0A\x00\x00\x00\x00\xA0\x30\x04\x00\xD9\xCC\x30\x20\x60\xC1\x00\x80"

op_address = "C:/Users/brady/VScode/malware/opcode/test.txt"
f = open(op_address, 'w')

md = Cs(CS_ARCH_X86, CS_MODE_64)
temp = 0
for (address, size, mnemonic, op_str) in md.disasm_lite(X86_CODE64_bytes, 0x00):
    str = ''
    for i in range(temp, temp+size):
        str = str + hex(X86_CODE64_bytes[i]) + ' '
    str = str + '\t' + mnemonic + ' ' + op_str
    f.write(str)
    f.write('\n')
    
    '''
    print("test_asm : [", end='')
    for i in range(temp, temp+size):
        print(hex(X86_CODE64_bytes[i]), end=' ')
    print(']\t%s\t%s' %(mnemonic, op_str))
    temp += size
    '''
#print('op_code :', type(op_data[0]), op_data[0].hex())
#print('op_code2 :', type(op_data2[0]), op_data2[0])
