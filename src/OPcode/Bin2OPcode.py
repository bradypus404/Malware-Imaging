from io import open_code
from capstone import *
from capstone.x86_const import *

try:
    IN = open('C:/Windows/System32/notepad.exe', 'rb') # 파일 오픈
except IOError:
    print('None file')
    exit(1)
output = []

while True:
    buf16 = IN.read(16)
    buf16Len = len(buf16)
    if(buf16Len == 0):break

    for i in range(buf16Len): # 헥사 부분의 헥사 값 16개 출력 (8개씩 2부분으로)
        output.append(hex(buf16[i]))

CODE = ','.join(output)
CODE = CODE.encode('utf-8')

op_data = []
op_address = "C:/Users/brady/VScode/malware/opcode/test.txt"
f = open(op_address, 'w')
'''
md = Cs(CS_ARCH_X86, CS_MODE_32)

for (address, size, mnemonic, op_str) in md.disasm_lite(CODE, 0x1000):
    	f.write("0x%x:\t%s\t%s\n" %(address, mnemonic, op_str))
'''
md = Cs(CS_ARCH_X86, CS_MODE_32)
md.detail = True

for i in md.disasm(CODE, 0x1000):
    print("0x%x:\t%s\t%s" %(i.address, i.mnemonic, i.op_str))
    if i.id in (X86_INS_ADD, X86_INS_AAA):
        print("0x%x:\t%s\t%s" %(i.address, i.mnemonic, i.op_str))

        if len(i.regs_read) > 0: 
            print("\tImplicit registers read: "),
            for r in i.regs_read:
                print("%s " %i.reg_name(r)),
            print

        if len(i.groups) > 0:
            print("\tThis instruction belongs to groups:"),
            for g in i.groups:
                print("%u" %g),
            print