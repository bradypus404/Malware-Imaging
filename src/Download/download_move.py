from pathlib import Path
import requests
import os
import shutil
import datetime
import subprocess
from tqdm import tqdm
import json

'''
def md5hash(file):
    BSIZE = 65536
    hnd = open(file, 'rb')
    hashmd5 = hashlib.md5()
    while True:
        info = hnd.read(BSIZE)
        if not info:
            break
        hashmd5.update(info)
    return hashmd5.hexdigest()

def sha1hash(file):
    BSIZE = 65536
    hnd = open(file, 'rb')
    hashsha1 = hashlib.sha1()
    while True:
        info = hnd.read(BSIZE)
        if not info:
            break
        hashsha1.update(info)
    return hashsha1.hexdigest()

def sha256hash(file):
    BSIZE = 65536
    hnd = open(file, 'rb')
    hashsha256 = hashlib.sha256()
    while True:
        info = hnd.read(BSIZE)
        if not info:
            break
        hashsha256.update(info)
    return hashsha256.hexdigest()
'''

def subprocess_open(command):
    popen = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (stdoutdata, stderrdata) = popen.communicate()
    return stdoutdata, stderrdata

def createFolder(directory):
    try:
        if not os.path.exists(directory):
            os.makedirs(directory)
    except OSError:
        print ('Error: Creating directory. ' +  directory)

def malbazaarlookup(hash):
    e = []
    st = []
    data = {'query': 'get_info', 'hash': hash}
    url = "https://mb-api.abuse.ch/api/v1/"
    response = requests.post(url, data=data)

    try :
        if response.json()["query_status"] == 'hash_not_found':
            e.append('None')
            st.append('None')
            st.append('None')
            return e, st
        
        else:
            try :
                response_json = response.json()["data"][0]
            except KeyError :
                e.append('None')
                st.append('None')
                st.append('None')
                return e, st

        #print('#File Info')
        e.append('#File Info')
        file_name = response_json.get("file_name")
        #print("Filename: " + file_name)
        e.append("Filename: " + file_name)
        file_type_mime = response_json.get("file_type_mime")
        file_type = response_json.get("file_type")
        #print("MIME File Type: " + file_type_mime)
        e.append("MIME File Type: " + file_type_mime)
        #print("File Type: " + file_type)
        e.append("File Type: " + file_type)
        st.append(file_type)
        first_seen = response_json.get("first_seen")
        last_seen = response_json.get("last_seen")
        #print("First Seen: " + str(first_seen))
        e.append("First Seen: " + str(first_seen))
        #print("Last Seen: " + str(last_seen))
        e.append("Last Seen: " + str(last_seen))
        malbazaar_signature = response_json.get('signature') #NoneType set
        #print('Signature: ' + str(malbazaar_signature))
        e.append('Signature: ' + str(malbazaar_signature))
        st.append(str(malbazaar_signature))
        tags = response_json.get("tags")
        #print("Tags:", tags)
        e.append("Tags:" + str(tags))

        #yararules
        yara_rules = response_json.get('yara_rules')
        if yara_rules:
            #print('#YARA rule information')
            e.append('#YARA rule information')
            for yar in range(0, len(yara_rules)):
                #print("YARA Rule name: " + str(yara_rules[yar]['rule_name']))
                e.append("YARA Rule name: " + str(yara_rules[yar]['rule_name']))
                #print("YARA Description: " + str(yara_rules[yar]['description']))
                e.append("YARA Description: " + str(yara_rules[yar]['description']))

        #print('#File HASH information')
        e.append('#File HASH information')
        sha256_hash = str(response_json.get("sha256_hash"))
        sha1_hash = str(response_json.get("sha1_hash"))
        md5_hash = str(response_json.get("md5_hash"))
        #print("MD5 hash: " + md5_hash)
        e.append("MD5 hash: " + md5_hash)
        #print("SHA1 hash: " + sha1_hash)
        e.append("SHA1 hash: " + sha1_hash)
        #print("SHA256 hash: " + sha256_hash)
        e.append("SHA256 hash: " + sha256_hash)
        imphash_hash = response_json.get("imphash")
        ssdeep_hash = response_json.get("ssdeep")
        #print("IMPHASH: " + str(imphash_hash)) #NoneType set
        e.append("IMPHASH: " + str(imphash_hash))
        #print("SSDEEP: " + ssdeep_hash)
        e.append("SSDEEP: " + ssdeep_hash)

        #print('#File Intelligence information')
        e.append('#File Intelligence information')
        delivery_method = response_json.get("delivery_method")
        #print("Delivery method: " + str(delivery_method))
        e.append("Delivery method: " + str(delivery_method))
        intelligence = response.json()["data"][0]["intelligence"]["clamav"]
        #print('Intelligence: '+ str(intelligence))
        e.append('Intelligence: '+ str(intelligence))

        #ReversingLabs = response.json()["data"][0]["vendor_intel"]["ReversingLabs"]
        ReversingLabs_verdict = response.json()["data"][0]["vendor_intel"]["ReversingLabs"]["status"]
        ReversingLabs_threatname = response.json()["data"][0]["vendor_intel"]["ReversingLabs"]["threat_name"]
        ReversingLabs_firstseen = response.json()["data"][0]["vendor_intel"]["ReversingLabs"]["first_seen"]
        #print('#REVERSINGLABS info')
        e.append('#REVERSINGLABS info')
        #print('ReversingLabs verdict: '+ str(ReversingLabs_verdict))
        e.append('ReversingLabs verdict: '+ str(ReversingLabs_verdict))
        #print('ReversingLabs threatname: '+ str(ReversingLabs_threatname))
        e.append('ReversingLabs threatname: '+ str(ReversingLabs_threatname))
        #print('ReversingLabs firstseen: '+ str(ReversingLabs_firstseen))
        e.append('ReversingLabs firstseen: '+ str(ReversingLabs_firstseen))
    
        #ANYRUN = response.json()["data"][0]["vendor_intel"]["ANY.RUN"]
        #print('#ANY.RUN info')
        e.append('#ANY.RUN info')
        #print('ANY.RUN: ', ANYRUN) Do not insert! - PEJ
        try :
            ANYRUN_verdict = response.json()["data"][0]["vendor_intel"]["ANY.RUN"][0]["verdict"]
            #print('ANY.RUN verdict: ' + str(ANYRUN_verdict))
            e.append('ANY.RUN verdict: ' + str(ANYRUN_verdict))
        except KeyError :
            #print('ANY.RUN verdict: ' + str(None))
            e.append('ANY.RUN verdict: ' + 'None')
        try :
            ANYRUN_firstseen = response.json()["data"][0]["vendor_intel"]["ANY.RUN"][0]["date"]
            #print('ANY.RUN firstseen: ' + str(ANYRUN_firstseen))
            e.append('ANY.RUN firstseen: ' + str(ANYRUN_firstseen))
        except KeyError :
            #print('ANY.RUN firstseen: ' + str(None))
            e.append('ANY.RUN firstseen: ' + 'None')
        try :
            ANYRUN_URL = response.json()["data"][0]["vendor_intel"]["ANY.RUN"][0]["analysis_url"]
            #print('ANY.RUN Analysis URL: ' + ANYRUN_URL)
            e.append('ANY.RUN Analysis URL: ' + ANYRUN_URL)
        except KeyError :
            #print('ANY.RUN Analysis URL: ' + str(None))
            e.append('ANY.RUN Analysis URL: ' + 'None')
    
        #HatchingTriage = response.json()["data"][0]["vendor_intel"]["Triage"]
        #print('#HatchingTriage info')
        e.append('#HatchingTriage info')
        try :
            HatchingTriage_verdict = response.json()["data"][0]["vendor_intel"]["Triage"]["score"]
            #print('Hatching Triage verdict: ' + str(HatchingTriage_verdict))
            e.append('Hatching Triage verdict: ' + str(HatchingTriage_verdict))
        except KeyError :
            #print('Hatching Triage verdict: ' + str(None))
            e.append('Hatching Triage verdict: ' + 'None')
        try :
            HatchingTriage_malwarefamily = response.json()["data"][0]["vendor_intel"]["Triage"]["malware_family"]
            #print('Hatching Triage Malware family: ' + str(HatchingTriage_malwarefamily)) #NoneType set
            e.append('Hatching Triage Malware family: ' + str(HatchingTriage_malwarefamily))
        except KeyError :
            #print('Hatching Triage Malware family: ' + str(None))
            e.append('Hatching Triage Malware family: ' + 'None')
        try :
            HatchingTriage_tags = response.json()["data"][0]["vendor_intel"]["Triage"]["tags"]
            #print('Hatching Triage tags: ' + str(HatchingTriage_tags))
            e.append('Hatching Triage tags: ' + str(HatchingTriage_tags))
        except KeyError :
            #print('Hatching Triage tags: ' + str(None))
            e.append('Hatching Triage tags: ' + 'None')
        try :
            HatchingTriage_URL = response.json()["data"][0]["vendor_intel"]["Triage"]["link"]
            #print('Hatching Triage Analysis URL: ' + str(HatchingTriage_URL))
            e.append('Hatching Triage Analysis URL: ' + str(HatchingTriage_URL))
        except KeyError :
            #print('Hatching Triage Analysis URL: ' + str(None))
            e.append('Hatching Triage Analysis URL: ' + 'None')

        #UnpacME
        #print('#Unpac Me info')
        e.append('#Unpac Me info')
        try :
            unpac_me = response.json()["data"][0]["vendor_intel"]["UnpacMe"]
            if unpac_me:
                for unp in range(0, len(unpac_me)):
                    #print("MD5 hash: " + str((unpac_me[unp]['md5_hash'])))
                    e.append("MD5 hash: " + str((unpac_me[unp]['md5_hash'])))
                    #print("SHA256 hash: " + str((unpac_me[unp]['sha256_hash'])))
                    e.append("SHA256 hash: " + str((unpac_me[unp]['sha256_hash'])))
                    #print("Link: " + str(unpac_me[unp]['link']))
                    e.append("Link: " + str(unpac_me[unp]['link']))
                    #print("Detections: " + str(unpac_me[unp]['detections']))
                    e.append("Detections: " + str(unpac_me[unp]['detections']))
        except KeyError :
            #print("unpac_me -> " + str(None))
            e.append("unpac_me -> " + 'None')

        #Malware Bazaar Page info
        #print('#AbuseCH Malware Bazaar info')
        e.append('#AbuseCH Malware Bazaar info')
        #print('AbuseCH Malware Bazaar page:')
        e.append('AbuseCH Malware Bazaar page:')
        #print('https://bazaar.abuse.ch/sample/' + sha256_hash)
        e.append('https://bazaar.abuse.ch/sample/' + sha256_hash)
        return e, st
    except json.JSONDecodeError :
        e.append('None')
        st.append('None')
        st.append('None')
        return e, st

'''
if args.file is None and args.hash is None:
   parser.error("at least one of --file or --hash required")
'''

if __name__ == '__main__':
    vd = datetime.date(2021,7,1)
    ld = datetime.date(2021,7,31)
    sign = []
    ftype = []
    p = []
    cnt = 0
    result = 1
    cpfile_list=[]
    while(result==True):
        path_dir = "./FL_Test/" + str(vd) + "/"
        file_list = os.listdir(path_dir)

        for i in file_list:
            file_len=len(cpfile_list)
            cpfile_list.append(i)
            cpfile_list=list(set(cpfile_list))
            dupfile_len=len(cpfile_list)
    #print(file_len)
    #print(dupfile_len)
            #print(file_len)
            #print(dupfile_len)
            if file_len == dupfile_len:
                print('remove ' + i)
                os.remove(path_dir + i)
                cnt += 1
    
        vd = vd + datetime.timedelta(days=1)
        result = vd <= ld
        
    print('dup file cnt: ', cnt)
    
    vd = datetime.date(2021,7,1)
    result = 1
    mal_mv = []
    while(result == True) :
        path = './FL_Test/' + str(vd) + "/" #Child ./FL_Test in Malwares
        #file_list1 = glob.glob(path)
        file_list2 = os.listdir(path)
        for file in file_list2 :
            mal_mv.append(path + file)
            if file.count(".") == 1 : #\. 1
                V = file.split(".")
                p.append(V[0])
            else :
                #print(len(i))
                for k in range(len(i)-1,0,-1): #\. s
                    if i[k] == '.':
                        p.append(i[:k])
                        break
        vd = vd + datetime.timedelta(days=1)
        result = vd <= ld

    s = []
    t = []
    idx = 0
    for pargs in tqdm(p, desc = 'Classifying(incomplete)', unit = ' .txt') :
        td = {}
        print()
        echo = []
        sig_type = []
        #args = parser.parse_args()
        print('File name(hash): ' + pargs)
        #fhash = args.hash
        echo, sig_type = malbazaarlookup(pargs)
        createFolder('./Class')
        
        for i in echo :
            subprocess_open('echo ' + i + ' >> ./Class/' + pargs + '.txt')

        print('Signature: ' + sig_type[1])
        print('File Type: ' + sig_type[0])
        
        s1 = len(s)
        s.append(sig_type[1])
        t.append(sig_type[0])
        s = list(set(s))
        t = list(set(t))
        td[sig_type[1]] = t
        t = []
        s2 = len(s)
        if s1 != s2 :
            createFolder('./Class/' + sig_type[1])
        for key in td :
            for mkdir in td[key] :
                createFolder('./Class/' + key + '/' + mkdir)
        #print('mv ' + mal_mv[idx][])
        print('mv Malware and Extracted Text File in')
        print('./Class/' + sig_type[1] + '/' + sig_type[0] + '/')
        shutil.move('./Class/' + pargs + '.txt', './Class/' + sig_type[1] + '/' + sig_type[0] + '/')
        shutil.move(mal_mv[idx], './Class/' + sig_type[1] + '/' + sig_type[0] + '/')
        idx += 1

'''
        ep = './txts/' + pargs + '.txt'
        rl = []
        with open(ep, 'r') as f :
            rl = f.readlines()
        #sign.append(rl[6][10:])
        #ftype.append(rl[3][10:])
        #sign = set(sign)
        #sign = list(sign)
        ##ftype = set(ftype)
        #ftype = list(ftype)
'''
  
'''
else:
    fpath = args.file

    p = Path(fpath)

    if p.is_dir():
        print('')
        print("You specified a directory.... Please specify a single file.")
        exit(0)

    else:
        if p.is_file():
            print('')
            print("#################################################################")
            print("Searching information for the FILE: " + args.file)
            print("#################################################################")
            print('')
            print('')
            
            files = [p]
            
            filename = (p).name
            fmd5hash = md5hash(p)
            fsha1hash = sha1hash(p)
            f256hash = sha256hash(p)
            magictype = magic.from_file(str(p))

            print('')
            print("   Filename: " + filename)
            print('')
            print("   MD5 hash: " + fmd5hash)
            print("  SHA1 hash: " + fsha1hash)
            print("SHA256 hash: " + f256hash)
            print('')

            if re.match(r'^PE[0-9]{2}\s\S*\s\([A-Z]{3}\)|^PE[0-9]{2}\+\s\S*\s\([a-z]', magictype):
                fpe = pefile.PE(p)
                imphash = fpe.get_imphash()
                print("    IMPHASH: " + imphash)
                print('')
            else:
                    print("    IMPHASH: <NONE>...not a PE")
                    print('')

            fhash = fmd5hash
            malbazaarlookup(fhash)
'''